generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role   @default(USER)
  accounts      Account[]
  sessions      Session[]

  // Your custom relation to the Project model
  videoList     VideoInfo[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum VideoStatus {
  DRAFT
  PROCESSING
  COMPLETED
  ERROR
}

model VideoInfo {
  id        String        @id @default(cuid())
  title     String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  status        VideoStatus @default(DRAFT)
  videoData     Json? // Perfect for storing editor state, trim times, effects, etc.
  outputUrl     String? // Link to the final rendered video

  // Relation to the User model
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}